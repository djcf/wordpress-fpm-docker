---
# Usage: ansible-playbook --extra-vars "domain=mydomain.org subdomain=mysubdomain.noflag.org.uk" add-wordpress-vhost.yml
- hosts: all
  vars:
    - image: "fpm"
    - ssl_host: yes
    - ssl_method: redirect
    - subdomain: ""
    - lets_encrypt: yes
    - use_php: yes
    - container_always_active: no
    - default_cert: "default"
    - escaped_domain: "{{ domain | regex_replace('\\.', '_') }}"
    - db_user: "{{ escaped_domain }}_user"
    - db_name: "{{ escaped_domain }}_sql"
    - db_port: 3306
    - db_host: sqldb.noflag.org.uk
  #connection: docker
  sudo: yes
  tasks:

  - include: inc/tasks-add-vhost.yml

  - name: Facts about this container 1
    set_fact:
      state: started
    when: container_always_active

  - name: Facts about this container 2
    set_fact:
      state: present
    when: not container_always_active

  - name: Project directory should exist
    file:
      path: "/var/www/{{ domain }}/conf"
      state: directory
      recurse: yes

  # Shell: if [ -e /var/www/$domain/.env ]
  - name: ENV file should exist
    stat: path="/var/www/{{ domain }}/.env"
    register: environment_exists
    ignore_errors: yes

  - name: Generate random database password if ENV does not exist
    local_action: shell tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
    register: generated_password
    when: not environment_exists

  - name: Store generated password if ENV does not exist
    set_fact:
      db_password: generated_password.stdout
    when: not environment_exists

  - name: Read password from environment if it exists
    shell: "source /var/www/{{ domain }}/.env; echo $DB_PASSWORD"
    register: read_password
    when: environment_exists
    args:
      executable: /bin/bash

  - name: Store read password
    set_fact:
      db_password: read_password.stdout
    when: environment_exists

  # Shell: scp env $host:/var/www/$domain/.env
  - name: Copy env vars for container to host
    template:
      src: env.j2
      dest: "/var/www/{{ domain }}/.env"
      owner: root
      group: root
      mode: 0600
    become: yes
    when: not environment_exists

  # Shell equivilent:
  # docker create --name $domain.fpm wordpress --net=docker_sqlnet --volumes {} wordpress
  - name: Create Wordpress container for new site
    docker_container:
      name: "{{ domain }}.fpm"
      image: "{{ image }}"
      state: "{{ state }}"
      networks:
        - name: docker_sqlnet
          link: "{{ db_host }}"
      volumes:
        - "/var/run/docker-apps/{{ domain }}:/var/run/docker-apps"
        - "/var/www/{{ domain }}/public_html/wp-content:/var/lib/wordpress/wp-content"
        - "/etc/ssmtp:/etc/ssmtp:ro"
      env_file: "/var/www/{{ domain }}/.env"
    become: yes

    # Shell: if [ -e /var/www/$domain/.env ]
  - name: SALTS file should exist
    stat: path="/var/www/{{ domain }}/public_html/wp-content/salts.php"
    register: salts_file_exists
    ignore_errors: yes

    # Shell: wget https://api.wordpress.org/secret-key/1.1/salt /var/www/$domain/public_html/wp-content/salts.php
  - name: Create new unique keys for WP auths
    get_url:
      url: https://api.wordpress.org/secret-key/1.1/salt
      dest: "/var/www/{{ domain }}/public_html/wp-content/salts.php"
    become: yes
    when: not salts_file_exists

    # Shell: echo "<?php" | cat /var/www/$domain/public_html/wp-content/salts.php > /var/www/$domain/public_html/wp-content/salts.php
  - name: Salts should be php files
    lineinfile:
      dest: "/var/www/{{ domain }}/public_html/wp-content/salts.php"
      regexp: '^php'
      insertbefore: BOF
      line: '<?php'
    become: yes
    when: not salts_file_exists

  # Shell equivilent
  # docker run --net=docker_sqlnet --env-file /var/www/$domain/.env --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --volumes-from $domain.fpm --rm wordpress sh -c '/usr/local/bin/wp db check --allow-root --path=/var/lib/wordpress'
  - name: Check to see if WP database exists
    command: "docker run --env-file /var/www/{{ domain }}/.env --net=docker_sqlnet --link {{ db_host }} --volumes-from {{ domain }}.fpm --rm wordpress sh -c '/usr/local/bin/wp db check --allow-root --path=/var/lib/wordpress'"
    ignore_errors: yes
    failed_when: db_exists.rc != 0
    register: db_exists
    become: yes

  # Shell equivilent:
  # docker run --net=docker_sqlnet --link sqldb.noflag.org.uk:sqldb.noflag.org.uk -e "MYSQL_PWD=1234" --rm mariadb sh -c 'mysql -f -hsqldb.noflag.org.uk -P3306 -uroot -e \"DROP USER {{ db_user }}; DROP DATABASE IF EXISTS {{ db_name }}; CREATE DATABASE {{ db_name }}; GRANT ALL ON {{ db_name }}.* TO '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}';\"'
  - name: Create database
    docker_container:
      name: "{{ domain }}.createdb"
      image: mariadb
      networks:
        - name: docker_sqlnet
          link: "{{ db_host }}"
      #command: "cat /tmp/createdb.sql | mysql -f -h{{ db_host }} -P{{ db_port }} -uroot -p$MYSQL_ROOT_PASSWORD"
      command: "mysql -f -h\"{{ db_host }}\" -P\"{{ db_port }}\" -uroot -e \"DROP DATABASE IF EXISTS {{ db_name }}; CREATE DATABASE {{ db_name }}; GRANT ALL ON {{ db_name }}.* TO '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}';\""
      env:
        MYSQL_PWD: 1234
      cleanup: yes
      detach: yes
    when: db_exists.rc != 0
    become: yes

  # Shell equvilent:
  # docker run --net=docker_sqlnet --env-file /var/www/$domain/.env --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --volumes-from $domain.fpm --rm wordpress sh -c '/usr/local/bin/wp --allow-root --path=/var/lib/wordpress core is-installed'
  - name: Check to see if WP is installed already
    command: "docker run --net=docker_sqlnet --env-file /var/www/{{ domain }}/.env --link {{ db_host }} --volumes-from {{ domain }}.fpm --rm wordpress sh -c '/usr/local/bin/wp core is-installed --allow-root --path=/var/lib/wordpress'"
    ignore_errors: yes
    failed_when: wp_was_installed.rc != 0
    register: wp_was_installed
    become: yes

  # Shell equivilent
  # docker run --net=docker_sqlnet --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --env-file /var/www/$domain/.env --volumes-from $domain.fpm --rm wordpress sh -c '/usr/local/bin/wp --allow-root --path=/var/lib/wordpress core install --url=http://$domain --admin_email=test@test.org'\
  - name: Install Wordpress database if not
    docker_container:
      command: "/usr/local/bin/wp core install --allow-root --path=/var/lib/wordpress --url={{ transport }}://{{ domain }} --title='{{ site_title }}' --admin_user='{{ admin_user }}' --admin_email={{ admin_email }}"
      name: "{{ domain }}-installer"
      image: "{{ image }}"
      networks:
        - name: docker_sqlnet
          link: "{{ db_host }}"
      volumes_from:
        - "{{ domain }}.fpm"
      env_file: "/var/www/{{ domain }}/.env"
      cleanup: yes
      detach: yes
    when: wp_was_installed.rc != 0
    become: yes