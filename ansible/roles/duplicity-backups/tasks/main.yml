- name: A .boto with gs credentials must exist in /root/.boto
  stat: src=/root/.boto
  register: boto_creds_exist
  failed_when: not boto_creds_exist.stat.exists

- name: Install imporant utilities
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - duplicity
    - gnupg
    - libgfshare-bin

- name: Check for an existing gpg key
  command: "gpg --list-secret-keys {{ gpg_email }}"
  register: key_exists
  failed_when: key_exists.rc != 0
  ignore_errors: true
  become: true

- name: Generate key
  shell: |
rm -rf /root/.gnupg/key-parts
mkdir -p /root/.gnupg/key-parts /var/backups/duplicity
export GNUPGHOME=/root/.gnupg
cat >/root/.gnupg/settings <<EOF
  %echo Generating a basic OpenPGP key
  Key-Type: DSA
  Key-Length: 4096
  Subkey-Type: ELG-E
  Subkey-Length: 4096
  Name-Real: {{ gpg_name }}
  Name-Comment: Used primarily for backup encryption
  Name-Email: {{ gpg_email }}
  Expire-Date: 0
  # Do a commit here, so that we can later print "done" :-)
  %commit
  %echo done
EOF
gpg --batch --generate-key settings
    when: key_exists|failed

- name: Export key for splitting
  shell: "gpg --export-secret-keys --armour {{ gpg_email }} > /root/.gnupg/key-parts/{{ inventory_hostname }}.asc; gpg --export-secret-keys --armour {{ gpg_email }} > /root/.gnupg/{{ inventory_hostname }}.asc"
  creates: "/root/.gnupg/key-parts/{{ inventory_hostname }}.asc"

- name: Split key for backup
  command: "gfsplit -n {{ threshold }} -m {{ sharecount }} /root/.gnupg/key-parts/{{ inventory_hostname }}.asc; rm -f /root/.gnupg/key-parts/{{ inventory_hostname }}.asc"
  when: key_exists|failed

- name: Fetch key parts from host
  synchronize: src=/root/.gnupg/key-parts dest=~/key-parts mode=pull

- name: Schedule a daily cron-task for backups
  cron:
    name: daily duplicity backup of this host
    minute: 0
    hour: 4
    job: $(which duplicity) --encrypt-key {{ gpg_email }} {{ daily_options }} {{ paths }} gs://{{ bucket }}/{{ inventory_hostname }}

- name: Schedule a weekly cron-task for backups
  cron:
    name: weekly duplicity backup of this host
    minute: 0
    hour: 0
    dow: 0
    job: $(which duplicity) --encrypt-key {{ gpg_email }} {{ weekly_options }} {{ paths }} gs://{{ bucket }}/{{ inventory_hostname }}

- name: Schedule a weekly cron-task for removing full backups
  cron:
    name: weekly duplicity removal of old backup
    minute: 0
    hour: 0
    dow: 3
    job: $(which duplicity) {{ removal_options }} gs://{{ bucket }}/{{ inventory_hostname }}