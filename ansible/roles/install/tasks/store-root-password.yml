- name: Store mysql logs
  command: "docker logs {{ sqldb }}"
  register: sql_log
  changed_when: false

- name: Find root password from container log
  set_fact:
    mysql_root_password: "{{ item.split(' ')|last }}"
  when:
    - '"MySQL root Password" in item'
  with_items: "{{sql_log.stdout_lines}}"
  #no_log: true
  changed_when: false

- debug:
    msg: >
      If the play fails at this stage it may be because MySQL did not print the generated root password.
      This can happen for several reasons, most commonly the MySQL container hasn't had time to generate the password yet, in which case you should
      simply re-run the play using ansible or type `vagrant provision`.
      This also happens when the MySQL files already exist. 
      In that case you should manually remove the files in /var/lib/docker/volumes/docker_sql (using docker volume rm docker_sql) and re-run the play.
      This may cause data loss. 
      The play will not do it for you!

- name: Store MySQL root password to file
  copy:
    content: |
      MYSQL_PWD={{ mysql_root_password }}
      MYSQL_HOST={{ mysql_host }}
      MYSQL_TCP_PORT={{ mysql_tcp_port }}
      DB_USER=root
    dest: "{{ mysql_root_password_file }}"
    owner: root
    group: root
    mode: 0660