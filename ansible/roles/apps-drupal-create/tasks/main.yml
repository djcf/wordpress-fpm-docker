---
# tasks file for apps-drupal-create
# - name: Project volumes should exist
#   docker_volume:
#     name: "{{ item }}"
#   with_items:
#     - "{{ primary_subdomain }}_sites"
#     - "{{ primary_subdomain }}_public_scripts"
#     - "{{ primary_subdomain }}_private"

- name: Project directory should exist
  file:
    path: "{{ user_site_dir }}/public_html/scripts"
    state: directory
    recurse: yes

# shell: cp -r /var/lib/wordpress/wp-content/* /var/www/$domain/public_html/wp-content
# - name: sync scripts directories
#   command: "rsync -a --stats /var/lib/drupal-7.59/scripts/ {{ user_site_dir }}/public_html/scripts"
#   changed_when: '"files transferred: 0" not in drupal_scripts_rsync.stdout'
#   register: drupal_scripts_rsync

# shell: cp -r /var/lib/wordpress/wp-content/* /var/www/$domain/public_html/wp-content
- name: sync sites directories
  command: "rsync -a --stats /var/lib/drupal-7.59/sites/ {{ user_site_dir }}/public_html/sites"
  changed_when: '"files transferred: 0" not in drupal_sites_rsync.stdout'
  register: drupal_sites_rsync

# shell: cp -r /var/lib/wordpress/wp-content/* /var/www/$domain/public_html/wp-content
# - name: sync private directories
#   command: "rsync -a --stats /var/lib/drupal-7.59/sites/ {{ user_site_dir }}/public_html/private"
#   changed_when: '"files transferred: 0" not in drupal_private_rsync.stdout'
#   register: drupal_private_rsync

- name: ensure wp-content directory has correct owner
  file:
    path: "{{ user_site_dir }}"
    mode: 0750
    owner: www-data
    group: www-data
    recurse: true

- name: Create Drupal container for new site
  docker_container:
    name: "{{ primary_subdomain }}.fpm"
    image: "{{ docker_image }}"
    state: "{{ state }}"
    networks:
      - name: docker_sqlnet
        links:
        - "{{ sqldb }}:{{ mysql_host }}"
    volumes: "{{ volumes }}"
    detach: yes
    log_options:
      max_size: 500k
    env_file: "{{ env_path }}"
    hostname: "fpm.{{ primary_subdomain }}.{{ primary_domain }}"
  tags:
    - docker

- name: Check to see if Drupal database exists
  command: >
    docker run 
      --env-file {{ env_path }} 
      --net=docker_sqlnet 
      --link {{ sqldb }}:{{ mysql_host }}
      --volumes-from {{ parent_container }}
      --rm
      {{ docker_image }} 
      sh -c 
        'drush sql-conf'
  ignore_errors: yes
  failed_when: db_exists.rc != 0
  register: db_exists
  changed_when: false
  tags:
    - database
    - sql

- include_role:
    name: sql-create-database
  when: db_exists is failed
  tags:
    - database
    - sql

- name: Install Drupal database
  docker_container:
    command: >
      drush site-install -y --db-url=mysql://{{ db_user }}:{{ mysql_pwd }}@{{ mysql_host }}:{{ mysql_tcp_port }}/{{ db_name }}
    name: "installer.{{ primary_domain }}"
    image: "{{ docker_image }}"
    networks:
      - name: docker_sqlnet
        links:
          - "{{ sqldb }}:{{ mysql_host }}"
    volumes_from:
      - "{{ parent_container }}"
    env_file: "{{ env_path }}"
    cleanup: yes
    detach: no
    hostname: "installer.{{ primary_domain }}"
  when:
    db_exists is failed

- include: cron.yml
  tags: cron