---
- name: A .boto with gs credentials must exist in /root/.boto
  stat: path=/root/.boto
  register: boto_creds_exist
  failed_when: boto_creds_exist.stat.exists == False

- name: Install imporant utilities
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - gnupg2
    - libgfshare-bin
    - python-boto
#    - duplicity

- name: Check for an existing gpg key
  command: "gpg --list-secret-keys {{ gpg_email }}"
  register: key_exists
  failed_when: key_exists.rc != 0
  ignore_errors: true
  become: true

- name: Make key template file
  template:
    src: keyfile.j2
    dest: /root/.gnupg/settings

- name: Generate key
  shell: |
    rm -rf /root/.gnupg/key-parts
    mkdir -p /root/.gnupg/key-parts /var/backups/duplicity
    export GNUPGHOME=/root/.gnupg
    gpg --homedir /root/.gnupg --batch --gen-key /root/.gnupg/settings
  when: key_exists|failed

- name: Export key for splitting
  shell: |
    export GNUPGHOME=/root/.gnupg
    gpg --homedir /root/.gnupg --export-secret-keys --armour {{ gpg_email }} > /root/.gnupg/key-parts/{{ inventory_hostname }}.asc
    gpg --homedir /root/.gnupg --export-secret-keys --armour {{ gpg_email }} > /root/.gnupg/{{ inventory_hostname }}.asc
  args: "creates=/root/.gnupg/key-parts/{{ inventory_hostname }}.asc"

- name: Split key for backup
  shell: |
    rm -rf /root/.gnupg/key-parts
    gfsplit -n {{ threshold }} -m {{ sharecount }} /root/.gnupg/key-parts/{{ inventory_hostname }}.asc
    rm -f /root/.gnupg/key-parts/{{ inventory_hostname }}.asc
  args:
    chdir: /root/.gnupg/key-parts
  when: key_exists|failed

- name: Fetch key parts from host
  synchronize: src=/root/.gnupg/key-parts dest=~/key-parts mode=pull

- name: Schedule a weekly cron-task for backups
  cron:
    name: weekly duplicity backup of this host
    minute: 0
    hour: 4
    dow: 1
    job: "export PASSPHRASE=''; $(which duplicity) --encrypt-key {{ gpg_email }} --include {{ paths | join(' --include ') }} gs://{{ bucket }}/{{ inventory_hostname }} {{ daily_options }}"

- name: Schedule a monthly cron-task for backups
  cron:
    name: monthly duplicity backup of this host
    minute: 0
    hour: 0
    day: 1
    job: "export PASSPHRASE=''; $(which duplicity) --encrypt-key {{ gpg_email }} --include {{ paths | join(' --include ') }} gs://{{ bucket }}/{{ inventory_hostname }} {{ weekly_options }}"

- name: Schedule a yearly cron-task for removing full backups
  cron:
    name: yearly duplicity removal of old backups
    minute: 0
    hour: 0
    day: 2
    month: 1
    job: "export PASSPHRASE=''; $(which duplicity) gs://{{ bucket }}/{{ inventory_hostname }} {{ removal_options }}"