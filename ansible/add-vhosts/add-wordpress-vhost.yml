---
# Usage: ansible-playbook --extra-vars "domain=mydomain.org subdomain=mysubdomain.noflag.org.uk" add-wordpress-vhost.yml
- hosts: all
  vars:
    - docker_image: "wordpress"
    - admin_user: admin
    - site_title: "{{ domain }}"
    - salts_file: "/var/www/{{ domain }}/public_html/salts.php"
    - phproot: /var/lib/wordpress
    - extra_nginx_configs:
      - inc/wordpress.conf
  vars_files:
    - ../resources/vars_docker_conf.yml
    - resources/vars_db.yml
    - resources/vars_php.yml

  tasks:
  - include: inc/tasks-add-vhost.yml
  - include: inc/tasks-add-container.yml

  # Shell: if [ -e /var/www/$domain/public_html/salts.php ]
  - name: SALTS file should exist
    stat: path="{{ salts_file }}"
    register: salts_file_exists
    ignore_errors: yes
    failed_when: not salts_file_exists.stat.exists

  # Shell: wget https://api.wordpress.org/secret-key/1.1/salt /var/www/$domain/public_html/wp-content/salts.php
  - name: Create new SALTS file (unique keys) for WP auths
    get_url:
      url: https://api.wordpress.org/secret-key/1.1/salt
      dest: "{{ salts_file }}"
    become: yes
    when: salts_file_exists|failed

  # Shell: echo "<?php" | cat /var/www/$domain/public_html/salts.php > /var/www/$domain/public_html/salts.php
  - name: Salts file hould be php file
    lineinfile:
      dest: "{{ salts_file }}"
      regexp: '^php'
      insertbefore: BOF
      line: '<?php'
    become: yes
    when: salts_file_exists|failed

  - include: inc/tasks-create-environment.yml

  # shell: [ if -d $domain.zip ]; then
  - name: Check to see if a site dump exists locally
    local_action: "stat path={{ domain }}.zip"
    register: dbdump_exists
    failed_when: not dbdump_exists.stat.exists
    ignore_errors: yes

  # shell: cp -r /var/lib/wordpress/wp-content/* /var/www/$domain/public_html/wp-content
  - name: sync wp-content directories
    command: "rsync -a --stats /var/lib/wordpress/wp-content/ /var/www/{{ domain }}/public_html/wp-content"
    changed_when: '"files transferred: 0" not in wp_content_rsync.stdout'
    register: wp_content_rsync
    when: dbdump_exists|failed
    become: yes

  # Shell equivilent:
  # docker create --name $domain.fpm wordpress --net=docker_sqlnet wordpress
  - name: Create Wordpress container for new site
    docker_container:
      name: "{{ domain }}.fpm"
      image: "{{ docker_image }}"
      state: "{{ state }}"
      networks:
        - name: docker_sqlnet
          link: "{{ db_host }}"
      volumes:
        - "/var/run/docker-apps/{{ domain }}:/var/run/docker-apps"
        - "/var/www/{{ domain }}/public_html/wp-content:/usr/src/wordpress/wp-content"
        - "/etc/ssmtp:/etc/ssmtp:ro"
        - "{{ salts_file }}:/var/lib/wordpress/salts.php:ro"
      env_file: "/var/www/{{ domain }}/.env"
      detach: yes
    become: yes

  # Shell equivilent
  # docker run --net=docker_sqlnet --env-file /var/www/$domain/.env --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --volumes-from $domain.fpm --rm wordpress sh -c \
  #   '/usr/local/bin/wp --allow-root --path=/var/lib/wordpress db check'
  - name: Check to see if WP database exists
    command: "docker run --env-file /var/www/{{ domain }}/.env --net=docker_sqlnet --link {{ db_host }} --volumes-from {{ domain }}.fpm --rm {{ docker_image }} sh -c '/usr/local/bin/wp db check --allow-root --path=/var/lib/wordpress'"
    ignore_errors: yes
    failed_when: db_exists.rc != 0
    register: db_exists
    become: yes
    changed_when: false

  - include: inc/tasks-create-database.yml
    when: db_exists|failed

  - include: inc/tasks-import-site.yml
    when: dbdump_exists|succeeded

  # Shell equvilent:
  # docker run --net=docker_sqlnet --env-file /var/www/$domain/.env --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --volumes-from $domain.fpm --rm wordpress sh -c \
  #   '/usr/local/bin/wp --allow-root --path=/var/lib/wordpress core is-installed'
  - name: Check to see if WP is installed already
    command: "docker run --net=docker_sqlnet --env-file /var/www/{{ domain }}/.env --link {{ db_host }} --volumes-from {{ domain }}.fpm --rm {{ docker_image }} sh -c '/usr/local/bin/wp core is-installed --allow-root --path=/var/lib/wordpress'"
    ignore_errors: yes
    failed_when: wp_was_installed.rc != 0
    register: wp_was_installed
    become: yes
    changed_when: false

  # Shell equivilent
  # docker run --net=docker_sqlnet --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --env-file /var/www/$domain/.env --volumes-from $domain.fpm --rm wordpress sh -c \
  #   '/usr/local/bin/wp --allow-root --path=/var/lib/wordpress core install --url=http://$domain --admin_email=test@test.org'
  - name: Install Wordpress database if not
    docker_container:
      command: "/usr/local/bin/wp core install --allow-root --path=/var/lib/wordpress --url={{ transport }}://{{ domain }} --title='{{ site_title }}' --admin_user='{{ admin_user }}' --admin_email='{{ admin_email }}'"
      name: "{{ domain }}-installer"
      image: "{{ docker_image }}"
      networks:
        - name: docker_sqlnet
          link: "{{ db_host }}"
      volumes_from:
        - "{{ domain }}.fpm"
      env_file: "/var/www/{{ domain }}/.env"
      cleanup: yes
      detach: no
    when:
      - wp_was_installed|failed
      - dbdump_exists|failed
    become: yes

  - name: Test the global domain is loading wordpress correctly
    action: uri url={{ transport }}://{{ domain }} return_content=yes
    register: test_success
    when:
      - subdomain == ""

  - name: Test the subdomain is loading wordpress correctly
    action: uri url={{ transport }}://{{ subdomain }} return_content=yes
    register: test_success
    when:
      - subdomain != ""

  - name: Assert that the new site is loading wordpress correctly
    fail: msg='The new vhost does not appear to be working'
    when: "'Wordpress' not in test_success.content"