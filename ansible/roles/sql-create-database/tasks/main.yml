---
- name: Read password from environment if it exists
  shell: "source {{ env_path }}; echo $MYSQL_PWD"
  register: read_password
  when:
    - mysql_pwd is undefined
    - env_path is defined
  args:
    executable: /bin/bash

- name: Store read password
  set_fact:
    mysql_pwd: "{{ read_password.stdout }}"
  when:
    - mysql_pwd is undefined
    - env_path is defined

- name: Print details of new database
  debug:
    var: "{{ item }}"
  with_items:
    - mysql_host
    - mysql_tcp_port
    - db_name
    - db_user
    - mysql_pwd

# Shell equivilent:
# docker run --net=docker_sqlnet --link sqldb.noflag.org.uk:sqldb.noflag.org.uk -e "MYSQL_PWD=1234" --rm mariadb sh -c 'mysql -f -hsqldb.noflag.org.uk -P3306 -uroot -e \"DROP USER db_user; DROP DATABASE IF EXISTS db_name; CREATE DATABASE db_name; GRANT ALL ON db_name.* TO 'db_user'@'%' IDENTIFIED BY 'db_password';\"'
- name: Create database (transient container option -- better)
  docker_container:
    name: "{{ primary_subdomain }}-createdb"
    image: "{{ mysql_image }}"
    networks:
      - name: docker_sqlnet
        links:
          - "{{ sqldb }}:{{ mysql_host }}"
   #command: "cat /tmp/createdb.sql | mysql -f -h{{ db_host }} -P{{ db_port }} -uroot -p$MYSQL_ROOT_PASSWORD"
    command: >
      mysql -f -h"{{ mysql_host }}" -uroot -e "
        CREATE DATABASE IF NOT EXISTS {{ db_name }};
        GRANT ALL ON {{ db_name }}.* TO '{{ db_user }}'@'%' IDENTIFIED BY '{{ mysql_pwd }}';
      "
    env_file: "{{ mysql_root_password_file }}"
    cleanup: yes
    detach: no

#- name: Create database (existing container option)
#  command: "docker exec {{ sqldb }} mysql -u root -e \"CREATE DATABASE IF NOT EXISTS {{ db_name }}; GRANT ALL ON {{ db_name }}.* TO '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}';\""
#  become: true