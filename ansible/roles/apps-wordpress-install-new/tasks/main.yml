---
# tasks file for apps-wordpress-install-new
# Shell equvilent:
# docker run --net=docker_sqlnet --env-file /var/www/$domain/.env --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --volumes-from $domain.fpm --rm wordpress sh -c '/usr/local/bin/wp --allow-root --path=/usr/src/wordpress core is-installed'
- name: Check to see if WP is installed already
  command: >
    docker run
        --net=docker_sqlnet
        --env-file {{ env_path }}
        --link {{ sqldb }}:{{ mysql_host }}
        --volumes-from {{ parent_container }}
        --rm {{ docker_image }}
      sh -c 
        '/usr/local/bin/wp core is-installed --allow-root --path={{ phproot }}'
  ignore_errors: yes
  failed_when: wp_was_installed.rc != 0
  register: wp_was_installed
  changed_when: false
  tags:
    - database

# Shell equivilent
# docker run --net=docker_sqlnet --link sqldb.noflag.org.uk:sqldb.noflag.org.uk --env-file /var/www/$domain/.env --volumes-from $domain.fpm --rm wordpress sh -c \
#   '/usr/local/bin/wp --allow-root --path=/usr/src/wordpress core install --url=http://$domain --admin_email=test@test.org'
- name: Install Wordpress database if not
  docker_container:
    command: >
      /usr/local/bin/wp core install
        --allow-root
        --path={{ phproot }}
        --url={{ ssl_host|ternary('https', 'http') }}://{{ primary_domain }}
        --title='{{ site_title }}'
        --admin_user='{{ admin_user }}'
        --admin_email='{{ admin_email }}'
    name: "{{ primary_subdomain }}-installer"
    image: "{{ docker_image }}"
    networks:
      - name: docker_sqlnet
        links:
          - "{{ sqldb }}:{{ mysql_host }}"
    volumes_from:
      - "{{ parent_container }}"
    env_file: "{{ env_path }}"
    cleanup: yes
    detach: no
    hostname: "{{ primary_domain }}"
  when:
    - wp_was_installed|failed
  tags:
    - database