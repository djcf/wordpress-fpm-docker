[{{ pool_name }}]

; default: ondemand, since process forking is supposedly quite cheap but memory is not
pm = {{ pool_type }}

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI. The below defaults are based on a server without much resources. Don't
; forget to tweak pm.* to fit your needs.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
; TODO: auto-conf max_children value (but how?)
pm.max_children = {{ pool_max_children }}

; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = {{ pool_start_servers }}

; The desired minimum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.min_spare_servers = {{ pool_min_spare_servers }}

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.max_spare_servers = {{ pool_max_spare_servers }}

; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
pm.process_idle_timeout = {{ pool_process_idle_timeout }};

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
pm.max_requests = 500



user = {{ fpm_user }}
access.log = /proc/self/fd/2
listen = /var/run/php-fpm.sock
listen.owner = www-data
listen.group = www-data
pm.status_path = /status
security.limit_extensions = .php .php3 .php4 .php5 .php7 .phtml

; env[HOSTNAME] = {{ primary_domain }}
env[DB_USER] = {{ db_user }}
env[DB_PASSWORD] = {{ db_password }}
env[DB_NAME] = {{ db_name }}
env[DB_HOST] = {{ db_host }}
env[DB_PORT]= {{ db_port }}
env[ENVIRONMENT]=live
env[HTTP_USER_AGENT_HTTPS] = {{ ssl_host | ternary('ON', 'OFF') }}
env[WP_CONTENT_DIR] = {{ user_wp_content_dir }}
env[SALTS_FILE] = {{ salts_file }}
;env[HTTP_HOST] = {{ primary_domain }}

php_flag[display_errors] = on
php_admin_value[error_log] = /proc/self/fd/2
php_admin_flag[log_errors] = on
php_admin_value[memory_limit] = 128M
php_admin_value[disable_functions] = exec,passthru,shell_exec,system

; Ensure worker stdout and stderr are sent to the main error log.
catch_workers_output = yes